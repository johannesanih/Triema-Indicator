//@version=5

indicator("Triema", overlay=true)

//Input Variables
sourceInput = input.source(close, "Source")
var int fastEmaLengthInput = input.int(8, "Fast EMA")
var int midEMALengthInput = input.int(13, "Mid EMA")
var int slowEMALengthInput = input.int(21, "Slow EMA")
var float pipsBufferInput = input.float(0.0003, "Pips Buffer")
var tradingTimeFrameInput = input.timeframe("5", "Trading Timeframe")
var trendConfirmationTimeFrameInput = input.timeframe("60", "Trend Confirmation Timeframe")

var color fastEMAColor = input.color(color.yellow, "Fast EMA color")
var color midEMAColor = input.color(color.orange, "Mid EMA color")
var color slowEMAColor = input.color(color.red, "Slow EMA color")

var color entryLineColor = input.color(color.white, "Entry-Level Color")
var color stopLossLevelColor = input.color(color.red, "Stop-Loss Level Color")
var color takeProfitLevelColor = input.color(color.green, "Take-Profit Level Color")

var int fastEMALineWidth = input.int(1, "Fast EMA line width")
var int midEMALineWidth = input.int(1, "Mid EMA line width")
var int slowEMALineWidth = input.int(1, "Slow EMA line width")

var int entryLineWidth = input.int(3, "Entry Line Width")
var int stopLossLineWidth = input.int(2, "Stop-Loss Line Width")
var int takeProfitLineWidth = input.int(2, "Take-Profit Line Width")

var int positionLinesLength = input.int(1, "Position Lines' Length")

//Indicators
float fastEMA = ta.ema(sourceInput, fastEmaLengthInput)
float midEMA = ta.ema(sourceInput, midEMALengthInput)
float slowEMA = ta.ema(sourceInput, slowEMALengthInput)

//Trade Timeframe Trend Situation
float currentFastEMA = request.security(syminfo.tickerid, tradingTimeFrameInput, fastEMA)
float currentMidEMA = request.security(syminfo.tickerid, tradingTimeFrameInput, midEMA)
float currentSlowEMA = request.security(syminfo.tickerid, tradingTimeFrameInput, slowEMA)

var string currentTrendSituation = "NEUTRAL"
if currentFastEMA > currentMidEMA and currentMidEMA > currentSlowEMA
    currentTrendSituation := "BUY" 
else
    if currentFastEMA < currentMidEMA and currentMidEMA < currentSlowEMA
        currentTrendSituation := "SELL"
    else
        currentTrendSituation := "NEUTRAL"

//Confirmation Trend Situation
float confirmationFastEMA = request.security(syminfo.tickerid, trendConfirmationTimeFrameInput, fastEMA)
float confirmationSlowEMA = request.security(syminfo.tickerid, trendConfirmationTimeFrameInput, slowEMA)

var string confirmationTrendSituation = "NEUTRAL"
if confirmationFastEMA > confirmationSlowEMA
    confirmationTrendSituation := "BUY"
else
    if confirmationFastEMA < confirmationSlowEMA
        confirmationTrendSituation := "SELL"
    else
        confirmationTrendSituation := "NEUTRAL"

//Check for Pullbacks
//--------------------------------------------

var int position = 0 //1-buy, 0-neutral, -1 - sell
//Confirm that it is buying both in the higher and lower timeframes
if confirmationTrendSituation == "BUY" and currentTrendSituation == "BUY"
    //Confirm that it price broke below the fastEMA
    if close[1] < currentFastEMA and close[1] > currentMidEMA
        position := 1
else //Confirm that it is selling both in the higher and lower timeframes
    if confirmationTrendSituation == "SELL" and currentTrendSituation == "SELL"
        //confirm that the price has broken above the fastEMA
        if close[1] > currentFastEMA and close[1] < currentMidEMA
            position := -1
    else
        position := 0


var float entryPriceLevel = na
var float stopLossPriceLevel = na
var float takeProfitPriceLevel1 = na
var float takeProfitPriceLevel2 = na
var float takeProfitPriceLevel3 = na
var float risk = na

//Arrays to store the highs and lows of 5 candles behind the current candle
var float[] highsArray = array.new_float(0)
var float[] lowsArray = array.new_float(0)

countAndPushCandles () =>
    if bar_index >= 5 //make sure there at least 5 candles to work with
        array.clear(highsArray) //Clear old values from array first
        array.clear(lowsArray)
        for i = 1 to 5 //loop through and iteration of 5 and push the highs and lows into their respective arrays
            array.push(highsArray, high[i])
            array.push(lowsArray, low[i])

            //If it gets bigger than 5 remove the oldest value
            if array.size(highsArray) > 5
                array.shift(highsArray)
            if array.size(lowsArray) > 5
                array.shift(lowsArray)

drawPositionLines (x, length) =>
    time_diff = time[1] - time
    x2 = bar_index+10
    //Draw position lines
    //Entry
    line.new(x1=x, y1=entryPriceLevel, x2=x2, y2=entryPriceLevel, color=entryLineColor, style = line.style_dashed, width = entryLineWidth)
    //Stop Loss
    line.new(x1=x, y1=stopLossPriceLevel, x2=x2, y2=stopLossPriceLevel, color=stopLossLevelColor, style = line.style_solid, width = stopLossLineWidth)
    //Take profit 1
    line.new(x1=x, y1=takeProfitPriceLevel1, x2=x2, y2=takeProfitPriceLevel1, color=takeProfitLevelColor, style = line.style_solid, width = takeProfitLineWidth)
    //Take profit 2
    line.new(x1=x, y1=takeProfitPriceLevel2, x2=x2, y2=takeProfitPriceLevel2, color=takeProfitLevelColor, style = line.style_solid, width = takeProfitLineWidth)
    //Take profit 3
    line.new(x1=x, y1=takeProfitPriceLevel3, x2=x2, y2=takeProfitPriceLevel3, color=takeProfitLevelColor, style = line.style_solid, width = takeProfitLineWidth)

if position == 1
    countAndPushCandles()

    //...calculate stoploss and takeprofit levels

    entryPriceLevel := array.max(highsArray) + pipsBufferInput
    stopLossPriceLevel := array.min(lowsArray) - pipsBufferInput
    risk := entryPriceLevel - stopLossPriceLevel
    takeProfitPriceLevel1 := entryPriceLevel + risk
    takeProfitPriceLevel2 := takeProfitPriceLevel1 + risk
    takeProfitPriceLevel3 := takeProfitPriceLevel2 + risk

    //Draw Lines
    drawPositionLines(time, positionLinesLength)
else
    if position == -1
        countAndPushCandles()

        //...calculate stoploss and takeprofit levels

        entryPriceLevel := array.min(lowsArray) - pipsBufferInput
        stopLossPriceLevel := array.max(highsArray) + pipsBufferInput
        risk := stopLossPriceLevel - entryPriceLevel
        takeProfitPriceLevel1 := entryPriceLevel - risk
        takeProfitPriceLevel2 := takeProfitPriceLevel1 - risk
        takeProfitPriceLevel3 := takeProfitPriceLevel2 - risk

        //Draw Lines
        drawPositionLines(time, positionLinesLength)

plot(fastEMA, "Fast EMA", fastEMAColor, fastEMALineWidth, plot.style_line)
plot(midEMA, "Mid EMA", midEMAColor, midEMALineWidth, plot.style_line)
plot(slowEMA, "Slow EMA", slowEMAColor, slowEMALineWidth, plot.style_line)